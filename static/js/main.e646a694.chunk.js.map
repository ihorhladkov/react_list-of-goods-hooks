{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","useState","sortType","setSortType","isReversed","setIsReversed","visibleGoods","goods","currentGoods","sort","a","b","localeCompare","length","reverse","preparedGood","className","type","cn","onClick","previousValue","map","good","ReactDOM","render","document","getElementById"],"mappings":"uPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAmCK,IAAMC,EAAgB,WAC3B,MAAgCC,mBAAgB,MAAhD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EA5BR,SACEC,EADF,GAGa,IADTL,EACQ,EADRA,SAAUE,EACF,EADEA,WAERI,EAAY,YAAOD,GAkBvB,OAhBIL,IACFM,EAAeA,EAAaC,MAAK,SAACC,EAAGC,GACnC,OAAQT,GACN,IAAK,sBACH,OAAOQ,EAAEE,cAAcD,GACzB,IAAK,iBACH,OAAOD,EAAEG,OAASF,EAAEE,OACtB,QAAS,OAAO,OAKlBT,IACFI,EAAeA,EAAaM,WAGvBN,EAMcO,CAAahB,EAAiB,CAAEG,WAAUE,eAE/D,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UAAW,CACjC,WAAyB,wBAAbhB,IAEdiB,QAAS,kBAAMhB,EAAY,wBAL7B,iCAUA,wBACEc,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAyB,mBAAbhB,IAEdiB,QAAS,kBAAMhB,EAAY,mBAL7B,4BAUA,wBACEc,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,YAAad,IAEfe,QAAS,kBAAMd,GAAc,SAAAe,GAAa,OAAKA,MALjD,sBAWGlB,GAAYE,IACX,wBACEa,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPhB,EAAY,MACZE,GAAc,IALlB,sBAcN,6BACE,6BAEIC,EAAae,KAAI,SAACC,GAAD,OACf,oBACE,UAAQ,OADV,SAIGA,GAFIA,cC3GrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e646a694.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype Sorts = 'SORT_ALPHABETICALLY' | 'SORT_BY_LENGTH' | null;\n\ninterface SortParams {\n  isReversed: boolean;\n  sortType: Sorts;\n}\n\nfunction preparedGood(\n  goods: string[],\n  { sortType, isReversed }: SortParams,\n): string[] {\n  let currentGoods = [...goods];\n\n  if (sortType) {\n    currentGoods = currentGoods.sort((a, b) => {\n      switch (sortType) {\n        case 'SORT_ALPHABETICALLY':\n          return a.localeCompare(b);\n        case 'SORT_BY_LENGTH':\n          return a.length - b.length;\n        default: return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    currentGoods = currentGoods.reverse();\n  }\n\n  return currentGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState<Sorts>(null);\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = preparedGood(goodsFromServer, { sortType, isReversed });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortType !== 'SORT_ALPHABETICALLY',\n          })}\n          onClick={() => setSortType('SORT_ALPHABETICALLY')}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortType !== 'SORT_BY_LENGTH',\n          })}\n          onClick={() => setSortType('SORT_BY_LENGTH')}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={() => setIsReversed(previousValue => !previousValue)}\n        >\n          Reverse\n        </button>\n\n        {\n          (sortType || isReversed) && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => {\n                setSortType(null);\n                setIsReversed(false);\n              }}\n            >\n              Reset\n            </button>\n          )\n        }\n      </div>\n\n      <ul>\n        <ul>\n          {\n            visibleGoods.map((good) => (\n              <li\n                data-cy=\"Good\"\n                key={good}\n              >\n                {good}\n              </li>\n            ))\n          }\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}